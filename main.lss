
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000020a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000029e  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00000b01  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000007dd  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000391  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000034  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000003d5  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000002fd  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000048  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__ctors_end>
   4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
   8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
   c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  10:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  18:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  20:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  30:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  34:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  3c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  40:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  44:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  50:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  58:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  5c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  60:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
  64:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>

00000068 <hw.1>:
  68:	48 65 6c 6c 6f 20 57 6f 72 6c 64 21 0a 00           Hello World!..

00000076 <layout_de>:
  76:	00 2c 02 1e 02 1f 00 31 02 21 02 22 02 23 02 31     .,.....1.!.".#.1
  86:	02 25 02 26 02 30 00 30 00 36 00 38 00 37 02 24     .%.&.0.0.6.8.7.$
  96:	00 27 00 1e 00 1f 00 20 00 21 00 22 00 23 00 24     .'..... .!.".#.$
  a6:	00 25 00 26 02 37 02 36 02 36 00 2e 02 37 02 38     .%.&.7.6.6...7.8
  b6:	40 14 02 04 02 05 02 06 02 07 02 08 02 09 02 0a     @...............
  c6:	02 0b 02 0c 02 0d 02 0e 02 0f 02 10 02 11 02 12     ................
  d6:	02 13 02 14 02 15 02 16 02 17 02 18 02 19 02 1a     ................
  e6:	02 1b 02 1d 02 1c 40 25 00 31 40 26 02 23 02 2d     ......@%.1@&.#.-
  f6:	00 35 00 04 00 05 00 06 00 07 00 08 00 09 00 0a     .5..............
 106:	00 0b 00 0c 00 0d 00 0e 00 0f 00 10 00 11 00 12     ................
 116:	00 13 00 14 00 15 00 16 00 17 00 18 00 19 00 1a     ................
 126:	00 1b 00 1d 00 1c 40 24 02 31 40 27 02 35           ......@$.1@'.5

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d8 e0       	ldi	r29, 0x08	; 8
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_clear_bss>:
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
 148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
 14a:	a8 30       	cpi	r26, 0x08	; 8
 14c:	b2 07       	cpc	r27, r18
 14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
 150:	0e 94 be 00 	call	0x17c	; 0x17c <main>
 154:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

00000158 <__bad_interrupt>:
 158:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015c <uart_tx_buf.constprop.0>:
{
	while(!(UCSR0A & (1 << UDRE0))) ;
	UDR0 = c;
}

static void uart_tx_buf(uint8_t *a, uint8_t len)
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
{
	while(len--)
	{
		uart_tx(*a++);
 160:	fc 01       	movw	r30, r24
 162:	20 81       	ld	r18, Z
 164:	01 96       	adiw	r24, 0x01	; 1
	while(!(UCSR0A & (1 << UDRE0))) ;
 166:	30 91 c0 00 	lds	r19, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 16a:	35 ff       	sbrs	r19, 5
 16c:	fc cf       	rjmp	.-8      	; 0x166 <uart_tx_buf.constprop.0+0xa>
	UDR0 = c;
 16e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(len--)
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	88 30       	cpi	r24, 0x08	; 8
 176:	92 07       	cpc	r25, r18
 178:	99 f7       	brne	.-26     	; 0x160 <uart_tx_buf.constprop.0+0x4>
	}
}
 17a:	08 95       	ret

0000017c <main>:
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = (uint8_t)(_BAUD & 0xFF);
 188:	87 e6       	ldi	r24, 0x67	; 103
 18a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (uint8_t)((_BAUD >> 8) & 0xFF);
 18e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	83 e2       	ldi	r24, 0x23	; 35
 196:	94 ef       	ldi	r25, 0xF4	; 244
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x1c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x26>
 1a2:	00 00       	nop
 1a4:	c8 e6       	ldi	r28, 0x68	; 104
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
		buf[2] = KEY_ENTER;
	}
	else if(c == '\t')
	{
		buf[0] = 0;
		buf[2] = KEY_TAB;
 1a8:	1b e2       	ldi	r17, 0x2B	; 43
		buf[2] = KEY_ENTER;
 1aa:	08 e2       	ldi	r16, 0x28	; 40
}

static void usb_string_P(const char *s)
{
	char c;
	while((c = pgm_read_byte(s++)))
 1ac:	fe 01       	movw	r30, r28
 1ae:	84 91       	lpm	r24, Z
 1b0:	81 11       	cpse	r24, r1
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <main+0x3a>
int main(void)
{
	static const char hw[] PROGMEM = "Hello World!\n";
	usb_init();
	usb_string_P(hw);
	for(;;)
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0x38>
	if(c == '\n')
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	71 f4       	brne	.+28     	; 0x1d6 <main+0x5a>
		buf[0] = 0;
 1ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <buf.0>
		buf[2] = KEY_ENTER;
 1be:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <buf.0+0x2>
	uart_tx_buf(buf, 8);
 1c2:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_tx_buf.constprop.0>
	buf[0] = 0;
 1c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <buf.0>
	buf[2] = 0;
 1ca:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <buf.0+0x2>
	uart_tx_buf(buf, 8);
 1ce:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_tx_buf.constprop.0>
 1d2:	21 96       	adiw	r28, 0x01	; 1
}
 1d4:	eb cf       	rjmp	.-42     	; 0x1ac <main+0x30>
	else if(c == '\t')
 1d6:	89 30       	cpi	r24, 0x09	; 9
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <main+0x68>
		buf[0] = 0;
 1da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <buf.0>
		buf[2] = KEY_TAB;
 1de:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <buf.0+0x2>
 1e2:	ef cf       	rjmp	.-34     	; 0x1c2 <main+0x46>
		buf[0] = pgm_read_byte(layout_de + (c - 32) * 2);
 1e4:	80 52       	subi	r24, 0x20	; 32
 1e6:	99 0b       	sbc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	fc 01       	movw	r30, r24
 1ee:	ea 58       	subi	r30, 0x8A	; 138
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	e4 91       	lpm	r30, Z
 1f4:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <buf.0>
		buf[2] = pgm_read_byte(layout_de + (c - 32) * 2 + 1);
 1f8:	fc 01       	movw	r30, r24
 1fa:	e9 58       	subi	r30, 0x89	; 137
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	e4 91       	lpm	r30, Z
 200:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <buf.0+0x2>
 204:	de cf       	rjmp	.-68     	; 0x1c2 <main+0x46>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
